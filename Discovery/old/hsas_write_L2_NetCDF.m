function hsas_write_L2_NetCDF(L2, fn)
    # L2                : structure generated by proc_L2.m
    % fn                : name of the netcdf file

    pkg load financial netcdf  # tested with netcdf-1.0.12



    % Define max size of dimensions
    i_wv = 256;
    i_time = Inf;

    % time origin (for units)
    torigin = y0(year(L2.time(1)));
    
    # define NetCDF_format to use ("Format": This can be "netcdf4_classic" (default), "classic", "64bit" or "netcdf4".)
    fmt = "netcdf4_classic";

    # Satlantic standard units
    units_irr = "uW/cm^2/nm";
    units_rad = "uW/cm^2/nm/sr";
    
    # instrument brand and model
    instrument_model = "Satlantic HyperOCR";
    
    
    
    % the number of elements for unlimited dimensions and has the special value inf
    % The dimension can also have a fixed size.
    % Use the additional option 'Format','64bit' to create a netcdf file compatible 
    % with the library version 3.6

    ### create NetCDF variables and attributes for L2.instr
    f1 = fieldnames(L2.instr);
    
    for ifld = 1:length(f1)
        nccreate(fn, f1{ifld}, "Dimensions",{"time",i_time, "wavelength", i_wv}, "Format", fmt );
        
        if strcmp((f1{ifld}),"Es")
            ncwriteatt(fn, f1{ifld},'units', units_irr);
        else
            ncwriteatt(fn, f1{ifld},'units', units_rad);
        endif
        
        ncwriteatt(fn, f1{ifld},'instrument_model', instrument_model);
        ncwriteatt(fn, f1{ifld},'serial number', L2.instr.(f1{ifld}).sn);
        ncwriteatt(fn, f1{ifld},'calibration file used to process the raw digital counts', L2.instr.(f1{ifld}).cal_file);
        ncwrite(fn,f1{ifld}, L2.instr.(f1{ifld}).data);
        
    endfor
    
    
    

    % the dimensions time was already created in the previous call. Its size
    % does not have to be repeated here.
    nccreate(fn, 'time','Dimensions',{'time'});

    % format 31 is 'yyyy-mm-dd HH:MM:SS'
    ncwriteatt(fn, 'time','units',['days since ' datestr(torigin,31)]);

    % loop over slices
    for i = 1:31
        % create some random data (or load it from somewhere)
        data = randn(imax,jmax);

        % assume we have daily data for January 2014
        time = datenum(2014,1,1) + i-1;

        % [1 1 i] are the start indices where to write the data
        start = [1 1 i];

        % write a slice of data
        ncwrite(filename,'temperature',data,[1 1 i]);

        % write the corresponding time
        ncwrite(filename,'time',time - torigin,i);    
    end


disp('You can check the file with the command "ncdump -v time -t test.nc".')












endfunction
